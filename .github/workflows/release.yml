name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
    
    - name: Run tests
      run: |
        dotnet test --no-build --configuration Release --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage
    
    - name: Create release packages
      run: |
        dotnet pack --no-build --configuration Release --output ./packages
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: packages/
  
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: packages/
    
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.build-and-test.outputs.version }}"
        echo "Generating release notes for $VERSION"
        
        # Create release notes
        cat > release_notes.md << EOF
        # ModularGodot Framework $VERSION
        
        ## üöÄ Features
        - ÂÆåÊï¥ÁöÑÊ®°ÂùóÂåñÊû∂ÊûÑÊ°ÜÊû∂
        - ËµÑÊ∫êÁÆ°ÁêÜÁ≥ªÁªüÔºàResourceManager + GodotResourceLoaderÔºâ
        - Âü∫Á°ÄËÆæÊñΩÊäΩË±°Â±Ç
        - ÊúçÂä°Â±ÇÊû∂ÊûÑ
        - ÂÆåÊï¥ÁöÑÂçïÂÖÉÊµãËØïË¶ÜÁõñÔºà64‰∏™ÊµãËØïÔºâ
        
        ## üì¶ Packages
        This release includes the following components:
        - MF.Commons - Âü∫Á°ÄÂÖ¨ÂÖ±ÁªÑ‰ª∂
        - MF.Infrastructure.Abstractions - Âü∫Á°ÄËÆæÊñΩÊäΩË±°Â±Ç
        - MF.Services.Abstractions - ÊúçÂä°ÊäΩË±°Â±Ç
        - MF.Services - ÊúçÂä°ÂÆûÁé∞Â±Ç
        - MF.Events - ‰∫ã‰ª∂Á≥ªÁªü
        - MF.Data - Êï∞ÊçÆÊ®°Âûã
        
        ## üîß Installation
        
        ### Prerequisites
        - .NET 9.0 or later
        - Godot 4.4.1 or later
        
        ### Usage
        1. Download the release package
        2. Extract to your Godot project
        3. Follow the documentation for integration
        
        ## üìö Documentation
        - [Architecture Design](./ModularGodot.Framework/Docs/)
        - [Resource Management System](./ModularGodot.Framework/Docs/ËµÑÊ∫êÁÆ°ÁêÜÁõëÊéßÁ≥ªÁªüÂÆûÁé∞ÊñπÊ°à.md)
        - [Getting Started Guide](./README.md)
        
        ## üêõ Known Issues
        - None reported for this release
        
        ## üôè Acknowledgments
        Thanks to all contributors who made this release possible!
        EOF
        
        echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.build-and-test.outputs.version }}
        release_name: ModularGodot Framework ${{ needs.build-and-test.outputs.version }}
        body_path: ${{ steps.release_notes.outputs.release_notes_file }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || contains(needs.build-and-test.outputs.version, '-') }}
    
    - name: Upload Release Assets
      run: |
        for file in packages/*; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$(basename $file)"
          fi
        done
    
    - name: Create source archive
      run: |
        VERSION="${{ needs.build-and-test.outputs.version }}"
        git archive --format=zip --prefix=ModularGodot-$VERSION/ HEAD > ModularGodot-$VERSION-source.zip
        
        # Upload source archive
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/zip" \
          --data-binary @ModularGodot-$VERSION-source.zip \
          "${{ steps.create_release.outputs.upload_url }}?name=ModularGodot-$VERSION-source.zip"
  
  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [build-and-test, create-release]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.create-release.result == 'success'
      run: |
        echo "‚úÖ Release ${{ needs.build-and-test.outputs.version }} created successfully!"
        echo "üéâ ModularGodot Framework is now available for download."
    
    - name: Notify failure
      if: needs.create-release.result == 'failure'
      run: |
        echo "‚ùå Release ${{ needs.build-and-test.outputs.version }} failed!"
        echo "Please check the logs and try again."
        exit 1